# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna
  - override /experiment: 0725-image_meta-convnextv2_tiny-lr1e-4-bs512-bn-inter_ce-metaPre10-lambdaMeta5

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "test/pauc"

logger:
  wandb:
    project: "ISIC2024_optuna_0725"

experiment_name: "lr${model.optimizer.lr}-lr_decay_coef${model.optimize_config.lr_decay_coef}-warmup${model.scheduler.num_warmup_steps}-\
                  dropout${model.net.dropout}-lambda_inter_ce_image${model.lambda_inter_ce_image}-lambda_inter_ce_meta${model.lambda_inter_ce_meta}"
data:
  fold: 1
trainer:
  max_epochs: 100

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    # pip install SQLAlchemy==1.4.46 
    storage: 'sqlite:///optuna.db'

    # name of the study to persist optimization results
    study_name: 0725-image_meta-convnextv2_tiny-inter_ce

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 100

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      # seed: 1234
      n_startup_trials: 20 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: tag(log, interval(0.0001, 0.01))
      model.optimize_config.lr_decay_coef: interval(0.1, 1)
      model.scheduler.num_warmup_steps: range(0, 30)
      model.net.meta_pretrain_path: choice("", "/workspace/logs/train/runs/0725-meta-lr1e-3-bs512-ep20/checkpoints/fold${data.fold}_epoch_005.ckpt", "/workspace/logs/train/runs/0725-meta-lr1e-3-bs512-ep20/checkpoints/fold${data.fold}_epoch_010.ckpt", "/workspace/logs/train/runs/0725-meta-lr1e-3-bs512-ep20/checkpoints/fold${data.fold}_epoch_015.ckpt")
      model.net.dropout: interval(0, 0.3)
      model.lambda_inter_ce_image: tag(log, interval(0.1, 10))
      model.lambda_inter_ce_meta: tag(log, interval(0.1, 10))
